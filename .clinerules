# MCP TypeScript Template - Developer Cheatsheet (.clinerules)

This cheatsheet provides quick guidance for working with the `mcp-ts-template` codebase.

## Core Utilities (`src/utils/`)

### Logging (`src/utils/logger.ts`)

- **Import**: `import { logger } from "./utils/logger.js";`
- **Usage**: Use standard logging methods (`debug`, `info`, `warn`, `error`).
- **Context**: Always include a context object as the second argument for correlation and structured logging. Context often comes from `requestContextService`.
  ```typescript
  // Get context (e.g., from requestContextService or create a new one)
  const context = requestContextService.getRequestContext();
  logger.info("Processing request", { ...context, requestId: 'xyz' });
  logger.error("Failed to process", { ...context, error: err.message });
  ```
- **Redaction**: Sensitive data (defined in logger config) is automatically redacted.

### Error Handling (`src/utils/errorHandler.ts`)

- **Import**: `import { ErrorHandler } from "./utils/errorHandler.js";`
- **Import Error Codes**: `import { BaseErrorCode, ToolErrorCode } from "../types-global/errors.js";` (Adjust path as needed)
- **Purpose**: Centralizes error catching, logging, and formatting for MCP responses.
- **`tryCatch` Usage**: Wrap potentially failing operations (especially async ones) in `ErrorHandler.tryCatch`.
  ```typescript
  // Inside an async function (e.g., tool handler)
  try {
    const result = await ErrorHandler.tryCatch(
      async () => await someAsyncOperation(params),
      {
        operation: 'performing some operation',
        context: requestContext, // Pass current context
        errorCode: ToolErrorCode.EXECUTION_FAILED, // Specific error code
      }
    );
    // ... process result
  } catch (error) {
    // tryCatch re-throws the formatted McpError if the operation fails.
    // This error can often be directly returned in the MCP response handler.
    // Or handle it further if needed.
    logger.error("Operation failed after tryCatch", { ...requestContext, error: error.message });
    // Potentially re-throw or return an error response
  }
  ```
- **Error Codes**: Use predefined error codes from `src/types-global/errors.ts` for consistency.

### Request Context (`src/utils/requestContext.ts`)

- **Import**: `import { requestContextService } from "./utils/requestContext.js";`
- **Purpose**: Manages context (like operation name, IDs) across asynchronous operations for better tracing and logging.
- **Creating Context**: Usually done at the start of a request/operation.
  ```typescript
  const requestContext = requestContextService.createRequestContext({
    operation: 'HandleEchoTool',
    toolName: 'echo_message',
    // Add other relevant identifiers
  });
  ```
- **Accessing Context**: Retrieve the current context within async functions.
  ```typescript
  const currentContext = requestContextService.getRequestContext();
  logger.info("Step completed", currentContext);
  ```
- **Passing Context**: Pass the context object to utility functions like `logger` and `ErrorHandler.tryCatch`.

### Sanitization (`src/utils/sanitization.ts`)

- **Import**: `import { sanitizeInput } from "./utils/sanitization.js";`
- **Purpose**: Cleans and validates input parameters to prevent security issues (e.g., XSS). Uses `validator` and `sanitize-html`.
- **Usage**: Apply to user-provided string inputs, especially those that might be rendered or stored.
  ```typescript
  const unsafeMessage = params.message; // From user input
  const safeMessage = sanitizeInput(unsafeMessage, { maxLength: 1000, allowTags: [] });
  // Use safeMessage in your logic
  ```
- **Options**: Control allowed tags, maximum length, etc. See `SanitizationOptions` in the file.

## MCP Development (`src/mcp-server/`)

### Adding a New Tool (`src/mcp-server/tools/`)

1.  **Directory**: Create `src/mcp-server/tools/yourToolName/`.
2.  **Logic (`logic.ts`)**: Implement the core function. Takes validated params, returns result. Use utilities (logger, error handler).
3.  **Registration (`registration.ts`)**:
    - Define input schema shape (used by `server.tool`).
    - Create `registerYourTool(server)` function.
    - Use `ErrorHandler.tryCatch` to wrap `server.tool()`.
    - Inside `server.tool()` handler:
      - Create request context.
      - Use `ErrorHandler.tryCatch` to wrap the call to your logic function.
      - Format the success response: `{ content: [{ type: "text", text: JSON.stringify(result) }] }`.
      - Log steps and errors with context.
4.  **Index (`index.ts`)**: Export the registration function.
5.  **Server (`src/mcp-server/server.ts`)**: Import and call `registerYourTool(server)`.

**Example**: See `src/mcp-server/tools/echoTool/` for a complete implementation.

### Adding a New Resource (`src/mcp-server/resources/`)

1.  **Directory**: Create `src/mcp-server/resources/yourResourceName/`.
2.  **Logic (`logic.ts`)**: Implement the core function. Takes `uri` (URL object) and validated `params`, returns resource data. Use utilities.
3.  **Registration (`registration.ts`)**:
    - Define `ResourceTemplate` with URI pattern.
    - Define query schema shape if applicable.
    - Create `registerYourResource(server)` function.
    - Use `ErrorHandler.tryCatch` to wrap `server.resource()`.
    - Inside `server.resource()` handler:
      - Create request context.
      - Use `ErrorHandler.tryCatch` to wrap the call to your logic function.
      - Format the success response: `{ contents: [{ uri: uri.href, text: JSON.stringify(result), mimeType: "..." }] }`.
      - Log steps and errors with context.
4.  **Index (`index.ts`)**: Export the registration function.
5.  **Server (`src/mcp-server/server.ts`)**: Import and call `registerYourResource(server)`.

**Example**: See `src/mcp-server/resources/echoResource/` for a complete implementation.

---
*Remember to keep this cheatsheet updated as the codebase evolves.*
